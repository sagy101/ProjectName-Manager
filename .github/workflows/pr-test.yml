name: PR Test Verification

on:
  pull_request:
    branches: [ main ]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  jest-mock:
    name: Jest Mock Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up NVM and Node.js 22.16.0
        run: |
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          . "$NVM_DIR/nvm.sh"
          nvm install 22.16.0
          nvm use 22.16.0
          node -v
          npm -v
      - name: Install dependencies
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npm ci
      - name: Run Jest Mock Coverage
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npm run test:jest:mock:coverage 2>&1 | tee jest-mock-output.txt || echo "Jest completed with issues"
      - name: Extract Jest Mock Results
        run: |
          # Extract test results
          TESTS_PASSED=$(grep -o "Tests:.*passed" jest-mock-output.txt | grep -o "[0-9]\+ passed" | grep -o "[0-9]\+" || echo "0")
          TESTS_FAILED=$(grep -o "Tests:.*failed" jest-mock-output.txt | grep -o "[0-9]\+ failed" | grep -o "[0-9]\+" || echo "0")
          TESTS_SKIPPED=$(grep -o "Tests:.*skipped" jest-mock-output.txt | grep -o "[0-9]\+ skipped" | grep -o "[0-9]\+" || echo "0")
          TESTS_TOTAL=$(grep -o "Tests:.*total" jest-mock-output.txt | grep -o "[0-9]\+ total" | grep -o "[0-9]\+" || echo "0")
          
          # Extract coverage
          COVERAGE=$(grep "All files" jest-mock-output.txt | awk '{print $4}' | head -1 || echo "N/A")
          
          # Save to environment
          echo "MOCK_TESTS_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
          echo "MOCK_TESTS_FAILED=$TESTS_FAILED" >> $GITHUB_ENV
          echo "MOCK_TESTS_SKIPPED=$TESTS_SKIPPED" >> $GITHUB_ENV
          echo "MOCK_TESTS_TOTAL=$TESTS_TOTAL" >> $GITHUB_ENV
          echo "MOCK_COVERAGE=$COVERAGE" >> $GITHUB_ENV
      - name: Upload Mock Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: jest-mock-coverage
          path: coverage/mock/
      - name: Post PR comment with mock test summary
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Jest Mock Coverage**
            
            üìä **Test Results:** ${{ env.MOCK_TESTS_PASSED }}/${{ env.MOCK_TESTS_TOTAL }} passed
            - ‚úÖ Passed: ${{ env.MOCK_TESTS_PASSED }}
            - ‚ùå Failed: ${{ env.MOCK_TESTS_FAILED }}
            - ‚è≠Ô∏è Skipped: ${{ env.MOCK_TESTS_SKIPPED }}
            
            üìà **Coverage:** ${{ env.MOCK_COVERAGE }}
            
            <details>
            <summary>View full results</summary>
            
            See the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed coverage report and any failed tests.
            </details>

  jest-prod:
    name: Jest Prod Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up NVM and Node.js 22.16.0
        run: |
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          . "$NVM_DIR/nvm.sh"
          nvm install 22.16.0
          nvm use 22.16.0
          node -v
          npm -v
      - name: Install dependencies
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npm ci
      - name: Run Jest Prod Coverage
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npm run test:jest:prod:coverage 2>&1 | tee jest-prod-output.txt || echo "Jest completed with issues"
      - name: Extract Jest Prod Results
        run: |
          # Extract test results
          TESTS_PASSED=$(grep -o "Tests:.*passed" jest-prod-output.txt | grep -o "[0-9]\+ passed" | grep -o "[0-9]\+" || echo "0")
          TESTS_FAILED=$(grep -o "Tests:.*failed" jest-prod-output.txt | grep -o "[0-9]\+ failed" | grep -o "[0-9]\+" || echo "0")
          TESTS_SKIPPED=$(grep -o "Tests:.*skipped" jest-prod-output.txt | grep -o "[0-9]\+ skipped" | grep -o "[0-9]\+" || echo "0")
          TESTS_TOTAL=$(grep -o "Tests:.*total" jest-prod-output.txt | grep -o "[0-9]\+ total" | grep -o "[0-9]\+" || echo "0")
          
          # Extract coverage
          COVERAGE=$(grep "All files" jest-prod-output.txt | awk '{print $4}' | head -1 || echo "N/A")
          
          # Save to environment
          echo "PROD_TESTS_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
          echo "PROD_TESTS_FAILED=$TESTS_FAILED" >> $GITHUB_ENV
          echo "PROD_TESTS_SKIPPED=$TESTS_SKIPPED" >> $GITHUB_ENV
          echo "PROD_TESTS_TOTAL=$TESTS_TOTAL" >> $GITHUB_ENV
          echo "PROD_COVERAGE=$COVERAGE" >> $GITHUB_ENV
      - name: Upload Prod Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: jest-prod-coverage
          path: coverage/prod/
      - name: Post PR comment with prod test summary
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Jest Prod Coverage**
            
            üìä **Test Results:** ${{ env.PROD_TESTS_PASSED }}/${{ env.PROD_TESTS_TOTAL }} passed
            - ‚úÖ Passed: ${{ env.PROD_TESTS_PASSED }}
            - ‚ùå Failed: ${{ env.PROD_TESTS_FAILED }}
            - ‚è≠Ô∏è Skipped: ${{ env.PROD_TESTS_SKIPPED }}
            
            üìà **Coverage:** ${{ env.PROD_COVERAGE }}
            
            <details>
            <summary>View full results</summary>
            
            See the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed coverage report and any failed tests.
            </details>

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up NVM and Node.js 22.16.0
        run: |
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          . "$NVM_DIR/nvm.sh"
          nvm install 22.16.0
          nvm use 22.16.0
          node -v
          npm -v
      - name: Install dependencies
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npm ci
      - name: Rebuild native modules for Electron
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npx @electron/rebuild -f -w node-pty
      - name: Set up minimal environment for E2E
        run: |
          mkdir -p $HOME/gopm
          echo "export GOPM_HOME=$HOME/gopm" >> $GITHUB_ENV
          echo "export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          echo "export PATH=$PATH:/usr/lib/jvm/java-11-openjdk-amd64/bin" >> $GITHUB_ENV
          echo "export FAKE_GCLOUD_INSTALLED=true" >> $GITHUB_ENV
      - name: Run E2E Tests (with Xvfb)
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          # Use the original script but capture output and add workers flag
          npm run build
          xvfb-run -a bash -c "unset PREFIX && source ~/.nvm/nvm.sh && nvm use && E2E_ENV=prod npx playwright test --workers=6 --reporter=list" 2>&1 | tee e2e-output.txt || echo "E2E completed with issues"
      - name: Extract E2E Results
        run: |
          # Extract test results from Playwright output
          TESTS_PASSED=$(grep -c "‚úì" e2e-output.txt || echo "0")
          TESTS_FAILED=$(grep -c "‚úó" e2e-output.txt || echo "0")
          TESTS_TOTAL=$((TESTS_PASSED + TESTS_FAILED))
          
          # Save to environment
          echo "E2E_TESTS_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
          echo "E2E_TESTS_FAILED=$TESTS_FAILED" >> $GITHUB_ENV
          echo "E2E_TESTS_TOTAL=$TESTS_TOTAL" >> $GITHUB_ENV
      - name: Post PR comment with E2E test summary
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **E2E Tests**
            
            üìä **Test Results:** ${{ env.E2E_TESTS_PASSED }}/${{ env.E2E_TESTS_TOTAL }} passed
            - ‚úÖ Passed: ${{ env.E2E_TESTS_PASSED }}
            - ‚ùå Failed: ${{ env.E2E_TESTS_FAILED }}
            
            <details>
            <summary>View full results</summary>
            
            See the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed E2E test results and any failed tests.
            </details> 