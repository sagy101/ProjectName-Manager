name: E2E Tests

on:
  pull_request:
    branches: [ main ]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      GOPM_HOME: ${{ github.workspace }}/gopm
      GOPATH: ${{ github.workspace }}/go
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      CLOUDBEES_FEATURES_ENV_KEY: mock-key-12345
      DEBUG_LOGS: 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up NVM and Node.js 22.16.0
        run: |
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          . "$NVM_DIR/nvm.sh"
          nvm install 22.16.0
          nvm use 22.16.0
          node -v
          npm -v
      - name: Install dependencies
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npm ci
      - name: Rebuild native modules for Electron
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npx @electron/rebuild -f -w node-pty
      - name: Set up comprehensive mock environment for E2E
        run: |
          # Create mock directories for general environment
          mkdir -p $HOME/go
          mkdir -p $HOME/go/bin
          mkdir -p $HOME/gopm
          mkdir -p /usr/local/bin
          
          # Create mock directories for configuration sections (from configurationSidebarAbout.json)
          mkdir -p ./weblifemirror
          mkdir -p ./weblifemirror/agent
          mkdir -p ./gopm
          mkdir -p ./threatintelligence
          mkdir -p ./threatintelligence/threat-intelligence
          mkdir -p ./threatintelligence/url-intelligence
          mkdir -p ./infrastructure
          mkdir -p ./activity-logger
          mkdir -p ./rule-engine
          mkdir -p ./test-analytics
          
          # Create mock gradlew files
          touch ./weblifemirror/gradlew
          touch ./threatintelligence/threat-intelligence/gradlew
          touch ./threatintelligence/url-intelligence/gradlew
          touch ./activity-logger/gradlew
          chmod +x ./weblifemirror/gradlew
          chmod +x ./threatintelligence/threat-intelligence/gradlew
          chmod +x ./threatintelligence/url-intelligence/gradlew
          chmod +x ./activity-logger/gradlew
          
          # Create mock Go directories
          mkdir -p $GOPATH/bin
          mkdir -p $GOPM_HOME
          
          # Set up environment variables (both for GitHub and current session)
          echo "GOPM_HOME=$GOPM_HOME" >> $GITHUB_ENV
          echo "GOPATH=$GOPATH" >> $GITHUB_ENV
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "CLOUDBEES_FEATURES_ENV_KEY=$CLOUDBEES_FEATURES_ENV_KEY" >> $GITHUB_ENV
          echo "PATH=$PATH:$GOPATH/bin:/usr/local/bin" >> $GITHUB_ENV
          
          # Also export for current session
          export GOPM_HOME=$GOPM_HOME
          export GOPATH=$GOPATH
          export JAVA_HOME=$JAVA_HOME
          export CLOUDBEES_FEATURES_ENV_KEY=$CLOUDBEES_FEATURES_ENV_KEY
          export PATH=$PATH:$GOPATH/bin:/usr/local/bin
          
          # Create mock gcloud CLI
          sudo tee /usr/local/bin/gcloud > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "--version")
              echo "Google Cloud SDK 450.0.0"
              echo "bq 2.0.98"
              echo "core 2023.11.17"
              echo "gcloud-crc32c 1.0.0"
              echo "gsutil 5.27"
              ;;
            "projects")
              if [[ "$2" == "list" ]]; then
                echo "mock-project-1"
                echo "mock-project-2"
                echo "test-project"
              fi
              ;;
            *)
              echo "gcloud mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/gcloud
          
          # Create mock kubectl
          sudo tee /usr/local/bin/kubectl > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "version")
              echo "Client Version: v1.28.4"
              ;;
            *)
              echo "kubectl mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/kubectl
          
          # Create mock kubectx
          sudo tee /usr/local/bin/kubectx > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "--help")
              echo "kubectx mock help"
              ;;
            *)
              echo "kubectx mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/kubectx
          
          # Create mock docker
          sudo tee /usr/local/bin/docker > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "version")
              echo "Docker version 24.0.7, build afdd53b"
              echo ""
              echo "Server: Docker Desktop 4.25.2 (129061)"
              echo " Engine:"
              echo "  Version:          24.0.7"
              ;;
            "ps")
              echo "CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES"
              ;;
            "info")
              echo "ServerVersion: 24.0.7"
              ;;
            *)
              echo "docker mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/docker
          
          # Create mock go
          sudo tee /usr/local/bin/go > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "version")
              echo "go version go1.21.4 linux/amd64"
              ;;
            *)
              echo "go mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/go
          
          # Create mock java
          sudo tee /usr/local/bin/java > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "-version")
              echo "openjdk version \"17.0.8\" 2023-07-18" >&2
              echo "OpenJDK Runtime Environment (build 17.0.8+7-Ubuntu-1ubuntu122.04)" >&2
              echo "OpenJDK 64-Bit Server VM (build 17.0.8+7-Ubuntu-1ubuntu122.04, mixed mode, sharing)" >&2
              ;;
            *)
              echo "java mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/java
          
          # Create mock brew
          sudo tee /usr/local/bin/brew > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "--version")
              echo "Homebrew 4.1.20"
              ;;
            *)
              echo "brew mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/brew
          
          # Create mock rdctl (Rancher Desktop)
          sudo tee /usr/local/bin/rdctl > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "version")
              echo "rdctl version 1.10.1"
              ;;
            *)
              echo "rdctl mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/rdctl
          
          # Create mock chromium
          sudo tee /usr/local/bin/chromium > /dev/null << 'EOF'
          #!/bin/bash
          case "$1" in
            "--version")
              echo "Chromium 125.0.6422.141"
              ;;
            *)
              echo "chromium mock: $*"
              ;;
          esac
          EOF
          sudo chmod +x /usr/local/bin/chromium
          
          # Create mock nvm (ensure it shows v16 to satisfy verification)
          mkdir -p $HOME/.nvm
          tee $HOME/.nvm/nvm.sh > /dev/null << 'EOF'
          #!/bin/bash
          nvm() {
            case "$1" in
              "--version")
                echo "0.39.7"
                ;;
              "ls")
                echo "       v16.20.2"
                echo "->     v22.16.0 (default)"
                ;;
              "use")
                echo "Now using node v22.16.0 (npm v10.9.2)"
                ;;
              *)
                echo "nvm mock: $*"
                ;;
            esac
          }
          EOF
          
          echo "Mock environment setup complete"
      - name: Test mock environment
        run: |
          echo "=== Testing Mock Environment ==="
          echo "PATH: $PATH"
          echo "GOPATH: $GOPATH"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "CLOUDBEES_FEATURES_ENV_KEY: $CLOUDBEES_FEATURES_ENV_KEY"
          echo ""
          echo "=== Testing Mock Executables ==="
          echo "gcloud version:"
          gcloud --version || echo "❌ gcloud failed"
          echo ""
          echo "kubectl version:"
          kubectl version --client || echo "❌ kubectl failed"
          echo ""
          echo "docker version:"
          docker version || echo "❌ docker failed"
          echo ""
          echo "go version:"
          go version || echo "❌ go failed"
          echo ""
          echo "java version:"
          java -version || echo "❌ java failed"
          echo ""
          echo "chromium version:"
          chromium --version || echo "❌ chromium failed"
          echo ""
          echo "nvm version and list:"
          source $HOME/.nvm/nvm.sh && nvm --version && nvm ls || echo "❌ nvm failed"
          echo ""
          echo "=== Testing Mock Directories ==="
          echo "Checking directories:"
          ls -la ./weblifemirror/ || echo "❌ weblifemirror not found"
          ls -la ./threatintelligence/ || echo "❌ threatintelligence not found"
          ls -la ./infrastructure/ || echo "❌ infrastructure not found"
          ls -la ./activity-logger/ || echo "❌ activity-logger not found"
          echo ""
          echo "Checking gradlew files:"
          ls -la ./weblifemirror/gradlew || echo "❌ weblifemirror/gradlew not found"
          ls -la ./threatintelligence/threat-intelligence/gradlew || echo "❌ threat-intelligence/gradlew not found"
          echo ""
          echo "=== Mock Environment Test Complete ==="
      - name: Run E2E Tests (with Xvfb)
        timeout-minutes: 20
        run: |
          # Set up environment variables for E2E tests (using job-level env vars)
          export GOPM_HOME=$GOPM_HOME
          export GOPATH=$GOPATH
          export JAVA_HOME=$JAVA_HOME
          export CLOUDBEES_FEATURES_ENV_KEY=$CLOUDBEES_FEATURES_ENV_KEY
          export PATH=$PATH:$GOPATH/bin:/usr/local/bin
          export DEBUG_LOGS=${{ env.DEBUG_LOGS }}
          
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          # Use the original script but capture output and add workers flag
          npm run build
          xvfb-run -a bash -c "
            export GOPM_HOME=$GOPM_HOME
            export GOPATH=$GOPATH
            export JAVA_HOME=$JAVA_HOME
            export CLOUDBEES_FEATURES_ENV_KEY=$CLOUDBEES_FEATURES_ENV_KEY
            export PATH=$PATH:$GOPATH/bin:/usr/local/bin
            export DEBUG_LOGS=${{ env.DEBUG_LOGS }}
            unset PREFIX && source ~/.nvm/nvm.sh && nvm use && E2E_ENV=prod npx playwright test --workers=6 --reporter=list --timeout=30000
          " 2>&1 | tee e2e-output.txt || echo "E2E completed with issues"

      - name: Upload E2E Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-logs
          path: e2e-output.txt

      - name: Extract E2E Results
        if: always() # Always run to capture results even if tests fail
        run: |
          # Extract test results from Playwright output
          TESTS_PASSED=$(grep -c "✓" e2e-output.txt || echo "0")
          TESTS_FAILED=$(grep -c "✗" e2e-output.txt || echo "0")
          TESTS_TOTAL=$((TESTS_PASSED + TESTS_FAILED))
          
          # Save to environment
          echo "E2E_TESTS_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
          echo "E2E_TESTS_FAILED=$TESTS_FAILED" >> $GITHUB_ENV
          echo "E2E_TESTS_TOTAL=$TESTS_TOTAL" >> $GITHUB_ENV
      - name: Post PR comment with E2E test summary
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **E2E Tests**
            
            📊 **Test Results:** ${{ env.E2E_TESTS_PASSED }}/${{ env.E2E_TESTS_TOTAL }} passed
            - ✅ Passed: ${{ env.E2E_TESTS_PASSED }}
            - ❌ Failed: ${{ env.E2E_TESTS_FAILED }}
            
            <details>
            <summary>View full results</summary>
            
            See the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed E2E test results and any failed tests.
            </details> 