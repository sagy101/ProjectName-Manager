name: E2E Tests

on:
  pull_request:
    branches: [ main ]

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      GOPM_HOME: ${{ github.workspace }}/gopm
      GOPATH: ${{ github.workspace }}/go
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      CLOUDBEES_FEATURES_ENV_KEY: mock-key-12345
      DEBUG_LOGS: 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up NVM and Node.js versions
        run: |
          export NVM_DIR="$HOME/.nvm"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
          . "$NVM_DIR/nvm.sh"
          nvm install 15.5.1
          nvm install 22.16.0
          nvm use 22.16.0
          echo "Installed Node.js versions:"
          nvm ls
          echo "Current Node.js version:"
          node -v
          npm -v
      - name: Install dependencies
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npm ci
      - name: Rebuild native modules for Electron
        run: |
          export NVM_DIR="$HOME/.nvm"
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          npx @electron/rebuild -f -w node-pty
      - name: Setup Mock Environment
        run: |
          echo "Setting up comprehensive mock environment for E2E tests..."
          
          # --- Go to parent directory to create sibling project folders ---
          cd ..
          
          # --- Create Mock Directories ---
          echo "Creating mock project directories in $(pwd)..."
          mkdir -p ./weblifemirror/agent
          mkdir -p ./threatintelligence/threat-intelligence
          mkdir -p ./threatintelligence/url-intelligence
          mkdir -p ./infrastructure
          mkdir -p ./activity-logger
          mkdir -p ./rule-engine
          mkdir -p ./gopm
          # Note: NOT creating ./test-analytics as it should remain invalid
          
          # --- Create Mock Gradlew Files ---
          echo "Creating mock gradlew files..."
          touch ./weblifemirror/gradlew
          touch ./threatintelligence/threat-intelligence/gradlew
          touch ./threatintelligence/url-intelligence/gradlew
          touch ./activity-logger/gradlew
          chmod +x ./weblifemirror/gradlew
          chmod +x ./threatintelligence/threat-intelligence/gradlew
          chmod +x ./threatintelligence/url-intelligence/gradlew
          chmod +x ./activity-logger/gradlew
          
          # --- Return to the workspace directory ---
          cd "${{ github.workspace }}"
          
          # --- Create Mock Bin Directory and Add to PATH ---
          mkdir -p ./mock_bin
          echo "$(pwd)/mock_bin" >> $GITHUB_PATH
          
          # --- Create Go Environment Directory (inside workspace, for GOPATH) ---
          echo "Creating Go environment..."
          mkdir -p $HOME/go/bin
          mkdir -p $GOPM_HOME
          
          # --- Create Mock Executables in ./mock_bin ---
          echo "Creating mock executables..."
          
          # gcloud
          tee ./mock_bin/gcloud > /dev/null << 'EOF'
          #!/bin/bash
          echo "Google Cloud SDK 450.0.0"
          EOF
          
          # kubectl
          tee ./mock_bin/kubectl > /dev/null << 'EOF'
          #!/bin/bash
          echo "Client Version: v1.28.4"
          EOF
          
          # kubectx
          tee ./mock_bin/kubectx > /dev/null << 'EOF'
          #!/bin/bash
          echo "mock-context"
          EOF

          # docker
          tee ./mock_bin/docker > /dev/null << 'EOF'
          #!/bin/bash
          if [[ "$1" == "info" && "$2" == "--format" ]]; then
            echo "24.0.7"
          elif [[ "$1" == "ps" ]]; then
            echo "CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES"
          else
            echo "Docker version 24.0.7, build afdd53b"
          fi
          EOF
          
          # go
          tee ./mock_bin/go > /dev/null << 'EOF'
          #!/bin/bash
          echo "go version go1.21.4 linux/amd64"
          EOF
          
          # java
          tee ./mock_bin/java > /dev/null << 'EOF'
          #!/bin/bash
          echo 'openjdk version "17.0.8" 2023-07-18' >&2
          EOF
          
          # brew
          tee ./mock_bin/brew > /dev/null << 'EOF'
          #!/bin/bash
          echo "Homebrew 4.1.20"
          EOF
          
          # rdctl
          tee ./mock_bin/rdctl > /dev/null << 'EOF'
          #!/bin/bash
          echo "rdctl version 1.10.1"
          EOF
          
          # chromium
          tee ./mock_bin/chromium > /dev/null << 'EOF'
          #!/bin/bash
          echo "Chromium 125.0.6422.141"
          EOF
          
          # nvm - Use real nvm when available, fallback to mock
          tee ./mock_bin/nvm > /dev/null << 'EOF'
          #!/bin/bash
          # Try to use real nvm first
          if [ -s "$HOME/.nvm/nvm.sh" ]; then
            . "$HOME/.nvm/nvm.sh"
            nvm "$@"
          else
            # Fallback to mock responses
            if [[ "$1" == "--version" ]]; then
              echo "0.39.7"
            elif [[ "$1" == "ls" ]]; then
              echo "       v15.5.1"
              echo "->     v22.16.0"
              echo "default -> 22.16.0 (-> v22.16.0)"
            else
              echo "Node Version Manager (v0.39.7)"
            fi
          fi
          EOF
          
          chmod +x ./mock_bin/*
          
          echo "Mock environment setup complete."
      - name: Run E2E Tests (with Xvfb)
        timeout-minutes: 20
        run: |
          # Set up environment variables for E2E tests
          export GOPM_HOME=$GOPM_HOME
          export GOPATH=$HOME/go
          export JAVA_HOME=$JAVA_HOME
          export CLOUDBEES_FEATURES_ENV_KEY=$CLOUDBEES_FEATURES_ENV_KEY
          export PATH=$(pwd)/mock_bin:$PATH:$GOPATH/bin:/usr/local/bin
          export DEBUG_LOGS=${{ env.DEBUG_LOGS }}
          export CI=true
          export NVM_DIR="$HOME/.nvm"
          
          # Source nvm and use Node.js 22.16.0 for the actual test execution
          . "$NVM_DIR/nvm.sh"
          nvm use 22.16.0
          
          # Test mock environment before running E2E tests
          echo "=== Testing Mock Environment ==="
          echo "PATH: $PATH"
          echo "GOPATH: $GOPATH"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "CLOUDBEES_FEATURES_ENV_KEY: $CLOUDBEES_FEATURES_ENV_KEY"
          echo "DEBUG_LOGS: $DEBUG_LOGS"
          echo ""
          echo "=== Testing Mock Executables ==="
          echo "gcloud version:"
          gcloud --version || echo "❌ gcloud failed"
          echo ""
          echo "kubectl version:"
          kubectl version --client || echo "❌ kubectl failed"
          echo ""
          echo "docker version:"
          docker version || echo "❌ docker failed"
          echo ""
          echo "go version:"
          go version || echo "❌ go failed"
          echo ""
          echo "java version:"
          java -version || echo "❌ java failed"
          echo ""
          echo "chromium version:"
          chromium --version || echo "❌ chromium failed"
          echo ""
          echo "nvm version and list:"
          nvm --version || echo "❌ nvm --version failed"
          nvm ls || echo "❌ nvm ls failed"
          echo ""
          echo "=== Testing Mock Directories (in parent directory) ==="
          echo "Checking directories in $(pwd)/..:"
          ls -la ../weblifemirror/ || echo "❌ weblifemirror not found"
          ls -la ../threatintelligence/ || echo "❌ threatintelligence not found"
          ls -la ../infrastructure/ || echo "❌ infrastructure not found"
          ls -la ../activity-logger/ || echo "❌ activity-logger not found"
          ls -la ../rule-engine/ || echo "❌ rule-engine not found"
          ls -la ../gopm/ || echo "❌ gopm not found"
          echo "test-analytics should NOT exist:"
          ls -la ../test-analytics/ && echo "❌ test-analytics exists (should be missing)" || echo "✅ test-analytics correctly missing"
          echo ""
          echo "Checking gradlew files:"
          ls -la ../weblifemirror/gradlew || echo "❌ weblifemirror/gradlew not found"
          ls -la ../threatintelligence/threat-intelligence/gradlew || echo "❌ threat-intelligence/gradlew not found"
          echo ""
          echo "=== Mock Environment Test Complete ==="
          echo ""
          
          # Build the app
          npm run build
          
          # Run all E2E tests
          echo "=== Running All E2E Tests ==="
          xvfb-run -a bash -c "
            export GOPM_HOME=$GOPM_HOME
            export GOPATH=$GOPATH
            export JAVA_HOME=$JAVA_HOME
            export CLOUDBEES_FEATURES_ENV_KEY=$CLOUDBEES_FEATURES_ENV_KEY
            export PATH=$(pwd)/mock_bin:$PATH:$GOPATH/bin:/usr/local/bin
            export DEBUG_LOGS=${{ env.DEBUG_LOGS }}
            export CI=true
            unset PREFIX && source ~/.nvm/nvm.sh && nvm use && DEBUG_LOGS=true E2E_ENV=prod npx playwright test --grep "should show fix buttons for invalid verifications with fixCommand in general environment" --reporter=list --timeout=30000 __tests__/e2e/FixCommandFeature.e2e.spec.js
          " 2>&1 | tee e2e-output.txt || echo "E2E tests completed"

      - name: Upload E2E Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-logs
          path: e2e-output.txt

      - name: Extract E2E Results
        if: always() # Always run to capture results even if tests fail
        run: |
          # Extract test results from Playwright output
          TESTS_PASSED=$(grep -c "✓" e2e-output.txt || echo "0")
          TESTS_FAILED=$(grep -c "✗" e2e-output.txt || echo "0")
          TESTS_TOTAL=$((TESTS_PASSED + TESTS_FAILED))
          
          # Save to environment
          echo "E2E_TESTS_PASSED=$TESTS_PASSED" >> $GITHUB_ENV
          echo "E2E_TESTS_FAILED=$TESTS_FAILED" >> $GITHUB_ENV
          echo "E2E_TESTS_TOTAL=$TESTS_TOTAL" >> $GITHUB_ENV
      - name: Post PR comment with E2E test summary
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **E2E Tests**
            
            📊 **Test Results:** ${{ env.E2E_TESTS_PASSED }}/${{ env.E2E_TESTS_TOTAL }} passed
            - ✅ Passed: ${{ env.E2E_TESTS_PASSED }}
            - ❌ Failed: ${{ env.E2E_TESTS_FAILED }}
            
            <details>
            <summary>View full results</summary>
            
            See the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed E2E test results and any failed tests.
            </details> 