[
  {
    "sectionId": "testAnalyticsLogCommand",
    "command": {
      "base": "echo 'Floating terminal for Test Analytics Logs'",
      "tabTitle": "Test Analytics Logs"
    }
  },
  {
    "sectionId": "mlEngineLogCommand",
    "command": {
      "base": "echo 'ML Engine logs'",
      "tabTitle": "ML Logs"
    }
  },
  {
    "sectionId": "mirror",
    "conditions": {
      "enabled": true,
      "attachState.mirror": false
    },
    "command": {
      "base": "${global.nodeVer} cd ./weblifemirror && ./gradlew bootRun --info -x buildAgent -x runDockerComposeRuleEngine  -x frontendDev -x runDockerComposeStats -Dspring.profiles.active=localDb,dev,worker,quartz",
      "associatedContainers": [
        "wiremock",
        "weblifemirror-db-replica-1",
        "weblifemirror-db-master-1",
        "weblifemirror-redis-1",
        "weblifemirror-localdb-1"
      ],
      "tabTitle": {
        "base": "Mirror + MariaDB"
      }
    }
  },
  {
    "sectionId": "mirror",
    "conditions": {
      "enabled": true,
      "attachState.mirror": true,
      "mode": "suspend"
    },
    "command": {
      "base": "${global.nodeVer} cd ./weblifemirror && ./gradlew bootRun --debug-jvm --info -x buildAgent -x runDockerComposeRuleEngine  -x frontendDev -x runDockerComposeStats -Dspring.profiles.active=localDb,dev,worker,quartz",
      "associatedContainers": [
        "wiremock",
        "weblifemirror-db-replica-1",
        "weblifemirror-db-master-1",
        "weblifemirror-redis-1",
        "weblifemirror-localdb-1"
      ],
      "tabTitle": {
        "base": "Mirror + MariaDB (Debug Suspend)"
      }
    }
  },
  {
    "sectionId": "mirror",
    "conditions": {
      "enabled": true,
      "attachState.mirror": true,
      "mode": "run"
    },
    "command": {
      "base": "${global.nodeVer} cd ./weblifemirror && ./gradlew bootRun --debug-jvm -Dorg.gradle.debug.suspend=false --info -x buildAgent -x runDockerComposeRuleEngine  -x frontendDev -x runDockerComposeStats -Dspring.profiles.active=localDb,dev,worker,quartz",
      "associatedContainers": [
        "wiremock",
        "weblifemirror-db-replica-1",
        "weblifemirror-db-master-1",
        "weblifemirror-redis-1",
        "weblifemirror-localdb-1"
      ],
      "tabTitle": {
        "base": "Mirror + MariaDB (Debug Run)"
      }
    }
  },
  {
    "sectionId": "frontend",
    "conditions": {
      "mirrorConfig.enabled": true,
      "frontendConfig.enabled": true,
      "frontendConfig.mode": "dev"
    },
    "command": {
      "base": "cd ./weblifemirror && webpack --watch",
      "prefix": "${global.nodeVer} ",
      "tabTitle": "Frontend (Dev Mode)"
    }
  },
  {
    "sectionId": "frontend",
    "conditions": {
      "mirrorConfig.enabled": true,
      "frontendConfig.enabled": true,
      "frontendConfig.mode": "normal"
    },
    "command": {
      "base": "cd ./weblifemirror && webpack --bail",
      "prefix": "${global.nodeVer} ",
      "tabTitle": "Frontend"
    }
  },
  {
    "sectionId": "gopm",
    "conditions": {
      "enabled": true,
      "deploymentType": "process"
    },
    "command": {
      "base": "cd ./gopm && make run-local",
      "prefix": "${global.nodeVer} ",
      "tabTitle": "gopm (Process)",
      "refreshConfig": {
        "prependCommands": [
          {
            "command": "cd ./weblifemirror/agent/src && make darwin-dev && mv bin/agent-darwin-amd64-dev ../bin && cd ../../.. && "
          }
        ]
      }
    }
  },
  {
    "sectionId": "gopm",
    "conditions": {
      "enabled": true,
      "deploymentType": "container"
    },
    "command": {
      "base": "cd ./gopm && make run-local-docker",
      "associatedContainers": ["serverbrowseragent"],
      "prefix": "${global.nodeVer} ",
      "tabTitle": "gopm (Container)"
    }
  },
  {
    "sectionId": "url-intelligence-sub",
    "conditions": {
      "enabled": true,
      "url-intelligenceConfig.enabled": true,
      "url-intelligenceConfig.mode": "mock"
    },
    "command": {
      "base": "cd ./ThreatIntelligenceMock && node inteligence.js",
      "prefix": "${global.nodeVer} ",
      "tabTitle": {
        "base": "URL Intelligence (Mock)"
      }
    }
  },
  {
    "sectionId": "url-intelligence-sub",
    "conditions": {
      "enabled": true,
      "url-intelligenceConfig.enabled": true,
      "url-intelligenceConfig.mode": "process"
    },
    "command": {
      "base": "kubectx ${kubectlContext} && PROOFPOINT_AUTH_CLIENT_SECRET=$(./infrastructure/scripts/decode-secret.sh default env-url-intelligence client_secret) PROOFPOINT_AUTH_CLIENT_ID=$(./infrastructure/scripts/decode-secret.sh default env-url-intelligence client_id) PROOFPOINT_SCORER_CUSTOMER_ID=$(./infrastructure/scripts/decode-secret.sh default env-url-intelligence customer_id) cd ./threatintelligence/url-intelligence && ./gradlew bootRun --args='--spring.profiles.active=staging --proofpoint.proxy.url= --server.port=8083 --threatintelligence.url=http://127.0.0.1:8084'",
      "prefix": "${global.nodeVer} ",
      "tabTitle": {
        "base": "URL Intelligence (Process)"
      }
    }
  },
  {
    "sectionId": "url-intelligence-sub",
    "conditions": {
      "enabled": true,
      "url-intelligenceConfig.enabled": true,
      "url-intelligenceConfig.mode": "forwarding",
      "urlIntelPodSelected": true
    },
    "command": {
      "base": "cd ./threatintelligence && kubectx ${kubectlContext} && kubectl port-forward ${urlIntelPod} 8083:8080",
      "prefix": "${global.nodeVer} ",
      "tabTitle": {
        "base": "URL Intelligence",
        "conditionalAppends": [
          {
            "condition": "url-intelligenceConfig.mode === 'forwarding' && urlIntelPodSelected === true",
            "append": " (Forwarding ${urlIntelPod})"
          }
        ]
      }
    }
  },
  {
    "sectionId": "threat-intelligence-sub",
    "conditions": {
      "enabled": true,
      "url-intelligenceConfig.enabled": true,
      "threatIntelPodSelected": true
    },
    "command": {
      "base": "kubectx ${kubectlContext} && kubectl port-forward ${threatIntelPod} 8084:8080",
      "prefix": "${global.nodeVer} ",
      "tabTitle": {
        "base": "Threat Intelligence"
      }
    }
  },
  {
    "sectionId": "activity-logger",
    "conditions": {
      "enabled": true,
      "attachState.activity-logger": false
    },
    "command": {
      "base": "${global.nodeVer} cd ./activity-logger && ./gradlew bootRun -Dspring.profiles.active=dev -Dgcloud.project=${gcloudProject}",
      "tabTitle": "Activity Logger"
    }
  },
  {
    "sectionId": "activity-logger",
    "conditions": {
      "enabled": true,
      "attachState.activity-logger": true,
      "mode": "suspend"
    },
    "command": {
      "base": "${global.nodeVer} cd ./activity-logger && ./gradlew bootRun --debug-jvm -Dspring.profiles.active=dev -Dgcloud.project=${gcloudProject}",
      "tabTitle": "Activity Logger (Debug Suspend)"
    }
  },
  {
    "sectionId": "activity-logger",
    "conditions": {
      "enabled": true,
      "attachState.activity-logger": true,
      "mode": "run"
    },
    "command": {
      "base": "${global.nodeVer} cd ./activity-logger && ./gradlew bootRun --debug-jvm -Dorg.gradle.debug.suspend=false -Dspring.profiles.active=dev -Dgcloud.project=${gcloudProject}",
      "tabTitle": "Activity Logger (Debug Run)"
    }
  },
  {
    "sectionId": "rule-engine",
    "conditions": {
      "enabled": true,
      "deploymentType": "process"
    },
    "command": {
      "base": "cd rule-engine && ./out/rule-engine",
      "tabTitle": {
        "base": "Rule Engine (Process)"
      },
      "refreshConfig": {
        "prependCommands": [
          {
            "command": "make run-local && "
          }
        ]
      }
    }
  },
  {
    "sectionId": "rule-engine",
    "conditions": {
      "enabled": true,
      "deploymentType": "container"
    },
    "command": {
      "base": "cd ./weblifemirror && ./gradlew runDockerComposeRuleEngine",
      "associatedContainers": ["rule-engine"],
      "prefix": "${global.nodeVer} ",
      "tabTitle": "Rule Engine (Container)"
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "mode": "development"
    },
    "command": {
      "base": "cd test-analytics && npm run dev -- --analytics-mode",
      "tabTitle": {
        "base": "Test Analytics (Dev)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "mode": "staging"
    },
    "command": {
      "base": "cd test-analytics && npm run staging -- --analytics-mode",
      "tabTitle": {
        "base": "Test Analytics (Staging)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "mode": "production"
    },
    "command": {
      "base": "cd test-analytics && npm run prod -- --analytics-mode",
      "tabTitle": {
        "base": "Test Analytics (Prod)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "dataProcessorConfig.enabled": true,
      "dataProcessorConfig.mode": "batch"
    },
    "command": {
      "base": "cd test-analytics/data-processor && python batch_processor.py --mode=${mode}",
      "tabTitle": {
        "base": "Data Processor (Batch)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "dataProcessorConfig.enabled": true,
      "dataProcessorConfig.mode": "stream"
    },
    "command": {
      "base": "cd test-analytics/data-processor && python stream_processor.py --mode=${mode}",
      "tabTitle": {
        "base": "Data Processor (Stream)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "dataProcessorConfig.enabled": true,
      "dataProcessorConfig.mode": "hybrid"
    },
    "command": {
      "base": "cd test-analytics/data-processor && python hybrid_processor.py --mode=${mode}",
      "tabTitle": {
        "base": "Data Processor (Hybrid)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "mlEngineConfig.enabled": true,
      "mlEngineConfig.mode": "tensorflow"
    },
    "command": {
      "base": "cd test-analytics/ml-engine && python run_tf_model.py --env=${mode}",
      "tabTitle": {
        "base": "ML Engine (TensorFlow)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "mlEngineConfig.enabled": true,
      "mlEngineConfig.mode": "pytorch"
    },
    "command": {
      "base": "cd test-analytics/ml-engine && python run_pytorch_model.py --env=${mode}",
      "tabTitle": {
        "base": "ML Engine (PyTorch)"
      }
    }
  },
  {
    "sectionId": "test-analytics",
    "conditions": {
      "enabled": true,
      "mlEngineConfig.enabled": true,
      "mlEngineConfig.mode": "sklearn"
    },
    "command": {
      "base": "cd test-analytics/ml-engine && python run_sklearn_model.py --env=${mode}",
      "tabTitle": {
        "base": "ML Engine (Scikit-learn)"
      }
    }
  }
]